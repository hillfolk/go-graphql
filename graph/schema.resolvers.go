package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"time"

	"github.com/mitchellh/mapstructure"

	"github.com/hillfolk/go-graphql/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	id := r.id()
	newTodo := &model.Todo{
		Text:   input.Text,
		ID:     id,
		UserID: input.UserID,
		User:   r.GetUserByID(input.UserID),
	}

	if input.Done != nil {
		newTodo.Done = *input.Done
	}

	r.TodoList = append(r.TodoList, newTodo)
	return newTodo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, changes map[string]interface{}) (*model.Todo, error) {
	var affectedTodo *model.Todo

	for i := 0; i < len(r.TodoList); i++ {
		if r.TodoList[i].ID == id {
			affectedTodo = r.TodoList[i]
			break
		}
	}

	if affectedTodo == nil {
		return nil, nil
	}

	err := mapstructure.Decode(changes, affectedTodo)
	if err != nil {
		panic(err)
	}

	return affectedTodo, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	time.Sleep(220 * time.Millisecond)

	if id == "100" {
		panic("critical failure")
	}

	for _, todo := range r.TodoList {
		if todo.ID == id {
			return todo, nil
		}
	}
	return nil, errors.New("not found")
}

// LastTodo is the resolver for the lastTodo field.
func (r *queryResolver) LastTodo(ctx context.Context) (*model.Todo, error) {
	if len(r.TodoList) == 0 {
		return nil, errors.New("not found")
	}
	return r.TodoList[len(r.TodoList)-1], nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.TodoList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
